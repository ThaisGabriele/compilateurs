import java.io.*;
import java.io.File; 
import java.io.IOException;
import java.util.ArrayList;
 
COMPILER UPortugol

/* Métodos para formatação */

String beginDocument (String s) {
    return "<html><body>" + s + "</body></html>";
} 

String ident(String s, int margin) {
    return "<div style='margin-left:" + margin +"px'>" + s + "</div>";
}

String toBlueBold(String s) { 
    return "</span><br/><span style='color: #0000ff;'><strong>"+ s + "</strong></span>";    
}
 
String toRedBold(String s) { 
    return  "<span style='color: #ff0000;'><strong>" + s + "</strong></span>";    
}

String toBlackBold(String s) { 
    return  "<strong>" + s +"</strong>";
}
 
void appendFile(String saidaFormatada) {
    try {
        String str = saidaFormatada;
        BufferedWriter writer = new BufferedWriter(new FileWriter("index.html", true));
        writer.append(str);
    
        writer.close();
        
    } catch (IOException e) {
        System.out.println("An error occurred.");
        e.printStackTrace();
    }
}
 
CHARACTERS
    letra = 'A'..'Z' + 'a'..'z'.
    digito = '0'..'9'.
    linhaComChar = ANY - '\r' - '\n'.
    qualquerCharMenosAspas = linhaComChar - '\"'.
 
TOKENS
    ident = letra { letra  | digito }.
    numero = ['-'] digito {digito}.
    strConst = '"' { qualquerCharMenosAspas | "\\\""} '"'.

/* Palavras-chave */
    
    inicio = "inicio" .
    fim = "fim".
    variavel = "variavel".
    caso = "caso".
    enquanto = "enquanto".
    para = "para".
    repita = "repita" .
    leia = "leia".
    escreva = "escreva".
    retorne = "retorne".
    constante = "constante".
    novo = "novo".
    algoritmo = "algoritmo".
  
/*  Condicionais    */ 

    se = "se".
    senao = "senao".
    entao = "entao".
    fimse = "fimse".

/*  Operadores    */ 
    maior = ">".
    menor = "<".
    maiorIgual = ">=".                      
    menorIgual = "<=".                      
    diferente = "!=".                     
    resto =  "%".                       

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n' 
 
IGNORE 
    '\n' + '\r' + '\t'
 
PRODUCTIONS

    UPortugol =  Bloco { Bloco } .     
    /* Bloco = DeclProc { Instrucao } */  
    Bloco                      (. String res; String saidaFormatada  = "";.)
    = DeclProc <out res>       (. saidaFormatada = saidaFormatada + res;  .)// v é o valor da expressão/saída O v vem do Bloco
    { 
        Instrucao <out res>    (. saidaFormatada = saidaFormatada + res; .)
    }                          (. System.out.println(saidaFormatada); appendFile(beginDocument(saidaFormatada)); .)
    .                           
    
    /* DeclProc = "procedimento" ident "(" {Parametros} ")" [":" Tipo ] "inicio" {Instrucao} "fim". */
    DeclProc<out String res>                  (. res = ""; String v1=""; String v2 = "";String t1 = ""; .)
    = "procedimento"                          (. res = toBlueBold(t.val); .)   
       ident                                  (. res = res + " " + toBlackBold(t.val); .)      
       "("                                    (. res = res + t.val; .) 
        Parametros  <out v1 >                 (. res = res + v1; .) 
        ")"                                   (. res = res + t.val; .)  
        [":"                                  (. res = res +  t.val; .)
        Tipo <out t1 >                        (. res = res + t1; .) 
        ]
        inicio                                (. res = res + toBlackBold(ident(t.val,20)); .)
        {
         Instrucao  <out v2>                  (. res = res +  ident(v2,40) ; .)  
        }
        fim                                   (. res = res + toRedBold(t.val); .)
      .

    Tipo <out String res>           (. res = ""; .) 
    = "inteiro"                     (. res = res + " " + toBlackBold(t.val); .)
    .
    
    Parametros <out String res>     (. res = ""; .)
    = 
    { 
        ident                        (. res = res + " " + toBlackBold(t.val); .)   
        ":"                          (. res = res + " " + t.val; .)
        "inteiro"                    (. res = res + toRedBold(t.val); .)
        [("," | "[]")]               (. res = res + t.val; .) 
    }   
    . 
    /* Instrucao = DeclVar | Condicao | Retorno | Escreva | Leia | Repeticao */
    Instrucao <out String res>       (.res = "";  String v1=""; String v2 = ""; String v3 = "";  String v4 = "";  .)
    = DeclVar <out v1>               (. res = res + v1; .) 
   //   | ChamaProc  <out v2>          (. res = res + v2; .) 
      | Condicao  <out v3>           (. res = res + v3; .) 
            "fimse;"                 (. res = res + toBlackBold(ident(t.val,20)); .)  
      | Retorno   <out v4>           (. res = res + v4; .)         
      ";"
    .

    Retorno <out String res>        (.res = "";  String v1=""; .)
    = retorne                       (. res = res + toBlackBold(ident(t.val,20)); .) 
     Expr  <out v1>                 (. res = res + v1; .) 
    .   

    DeclVar  <out String res>        (. res = ""; String v1=""; String v2 = ""; .)           
    = ComAtribuicao <out v1>         (. res = res + v1; .)
    ";"                              (. res = res + t.val;.)    
    | SemAtribuicao <out v2>         (. res = res + v2;.)
    ";"                              (. res = res + t.val;.)
    .
    
    // variavel j, min, minj: inteiro;  variavel tmp: inteiro;
    SemAtribuicao <out String res>  (. res = ""; String v1=""; .) 
    =  variavel                     (. res = res + toBlackBold(t.val); .)
      Expr <out v1>                 (. res = res + v1; .)
      [(",")]                       (. res = res + t.val;.) 
      [(":" "inteiro")]             (. res = res + t.val;.) 
       {
        variavel                    (. res = res + toBlackBold(t.val); .)
        Expr <out v1>               (. res = res + v1; .)
        [(",")]                     (. res = res + t.val;.) 
        [(":" "inteiro")]           (. res = res + t.val;.) 
       }
    .                  
    //min = v[i]; minj = i;
    ComAtribuicao <out String res>   (. res = "";  String v1=""; .)
    = ident                          (. res = res + " "+ toBlackBold(t.val);.)
    "="                              (. res = res + t.val;.)
    Expr <out v1>                    (. res = res + v1; .)
    ";"                              (. res = res + t.val;.)
    .

    Condicao <out String res>               (. res = " ";  String v1=" ";  String op=" "; String v12=" "; String v2=" ";.)
    =   se Expr  <out v1>                   (. res =  " " + toBlackBold(" " + v1 + " "); .)
        ( maior | menor |
          menorIgual | maiorIgual | 
          diferente | resto ) Expr<out v12> (. res = res + " " + v12 + " " ; .)      
        entao                               (. res = res + toBlackBold(t.val); .)
        Instrucao  <out v2>                 (. res = res + ident(v2,40); .) 
        [ ( senao  Instrucao <out v2>       (. res = res + ident(v2,40); .)
           ) ]  
    .
/*
    OpRelacional <out String res>   (. res = ""; .)
    =    "<"                        (. res = res + t.val;.)
        | ">"                       (. res = res + t.val;.)
        | ">="                      (. res = res + t.val;.)
        | "<="                      (. res = res + t.val;.)
        | "!="                      (. res = res + t.val;.)
        | "%"                       (. res = res + t.val;.)
    .
 */ 
    //v = novo inteiro[MAX];
    //v = novo inteiro {1, 2, 3, 4, 5};  
    FatorVetor <out String res>   (. res = "";  String v1=""; String v2=""; .)
    =  
        "["                                                     
         Expr  <out v1>                      (. res =  " " + toBlackBold(" " + v1); .)
        "]"                                  (. res = res + t.val ; .)             
       | novo                                (. res = res + toBlackBold(t.val); .)
       ident                                 (. res = res + toBlackBold(t.val); .)
       ( Expr   <out v1>                     (. res = res + v1; .)  
       | Inicializa <out v2>                 (. res = res + v2; .)  
       )
    .
    
    Expr <out String res>            (. res = "";  String v1=""; String v2=""; .)
    = ["-"]                          (. res = res + t.val;.)
    Termo <out v1>                   (. res = res + v1; .)             
        {                       
            ( "+" Termo  <out v2>    (. res = res + v2; .)          
            | "-" Termo  <out v2>    (. res = res + v2; .)  
            )
        } 
    .

    Termo <out String res>        (. res = "";  String v1="";  String v2="";.)
    = Fator <out v1>              (. res = res + v1; .)               
    { 
        ( "*"  Fator <out v2>     (. res = res + v2; .)  
        | "/" Fator  <out v2>     (. res = res + v2; .)  
        ) 
    } .

    Fator <out String res>         (. res = "";  String v1=""; String v2=""; .)
    = 
    ident                          (. res = res + toBlackBold(t.val); .)
    [ 
        FatorVetor    <out v1>     (. res = res + v1; .)  
    ] 
    | numero                       (. res = res + toBlackBold(t.val); .)
   // |  Expr   <out v1>            (. res = res + v1; .)  
  //  |  FatorVetor <out v2>        (. res = res + v2; .) 
  //  | "[" ident "]"               (. res = res + t.val; .) 
    .


    
    Inicializa <out String res>   (. res = ""; .)
    = "{"                         (. res = res + t.val; .) 
        { 
            numero                (. res = res + toBlackBold(t.val); .)
            [","]                 (. res = res + t.val; .) 
        } 
      "}"                         (. res = res + t.val; .) 
    .
 
    //tamanho(vetor)
    TamanhoVet <out String res>     (. res = ""; String v1=""; .)
    =   "tamanho"                   (. res = res + t.val; .)
        "("                         (. res = res + t.val; .)
        ( numero | Expr  <out v1>)  (. res = res + v1; .)           
        ")"                         (. res = res + t.val; .)
    .


END UPortugol.

/*
    ChamaProc  <out String res>     (. res = ""; String v1=""; String v2 = ""; .)
    = Designator <out v1>           (. res = res + v1;.) 
    ParamsDeclarados <out v2>       (. res = res + v2;.) 
    ";"                             (. res = res + t.val;.) 
    .
 */
  /*
    Designator <out String res>    (. res = ""; String v1="" .)
    = ident                        (. res = res + toBlackBold(t.val);.)
    "("                            (. res = res + t.val;.) 
      Expr  <out v1>               (. res = res + v1; .)
    ")"                            (. res = res + t.val;.) 
    .
    */

//ParamsDeclarados  = "(" { ident [ Expr ] [ ","] } ")".
 /*
    ParamsDeclarados <out String res>   (. res = "";.)
    = "("                               (. res = res + t.val;.) 
     { ident [ Expr ] [ ","] } ")". 
     */


     
  /*  UPortugol = { Bloco }.
    Bloco = DeclProc { Instrucao } .
    DeclProc = "procedimento" ident "(" {Parametros} ")" [":" Tipo ] "inicio" {Instrucao} "fim".
    Tipo = "inteiro".
    Instrucao = DeclVar |
                ChamaProc | Condicao "fimse;"  | Retorno ";" | Escreva .
    Parametros =  ident ":" "inteiro" [ "[]" ][","]. 
    DeclVar = ComAtribuicao ";" | SemAtribuicao ";" .
    SemAtribuicao = "variavel" Expr  [(":" |",")] ["inteiro"] {Expr  [(":" |",")] [Tipo]}. 
    ComAtribuicao = ident "=" Expr .
    ChamaProc = Designator ParamsDeclarados ";".
    ParamsDeclarados  = "(" { ident [ Expr ] [ ","] } ")".
    ParamsPassados = "(" [ Expr {"," Expr}] ")".
    Condicao = "se" Expr OpRelacional Expr "entao" Instrucao  ["senao" Instrucao].
    OpRelacional = "<" | ">" | ">=" | "<=" | "!=".
    Designator = ident "(" Expr ")".
    Expr = ["-"] Termo { ( "+" Termo | "-" Termo ) } .
    Termo = Fator { ( "*" Fator | "/" Fator ) } .
    Fator =  ident ["[" Expr "]"] | numero | "(" Expr ")" | "abs" "(" Expr ")" .
    FatorVetor =  "novo" ident ("[" Expr "]" | Inicializ).
    Inicializ = "{" { numero } "}".
   
    Retorno = "retorne" [Expr] .
    Escreva = "escreva" "(" [Expr] [strConst] [Expr] {  [ Expr ] [strConst] "," [strConst]  Expr }  ");". *
    */
