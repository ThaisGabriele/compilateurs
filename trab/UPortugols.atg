import java.io.*;
import java.io.File; 
import java.io.IOException;
import java.util.ArrayList;
 
COMPILER UPortugol
/* Métodos necessários */

String beginDocument (String s) {
    return "<html><body>" + s + "</body></html>";
} 

String ident(String s, int margin) {
    return "<div style='margin-left:" + margin +"px'>" + s + "</div>";
}

String toBlueBold(String s) { 
    return "</span><br/><span style='color: #0000ff;'><strong>"+ s + "</strong></span>";    
}
 
String toRedBold(String s) { 
    return  "<span style='color: #ff0000;'><strong>" + s + "</strong></span>";    
}
String toBlackBold(String s) { 
    return  "<strong>" + s +"</strong>";
}
 
void appendFile(String saidaFormatada) {
    try {
        String str = saidaFormatada;
        BufferedWriter writer = new BufferedWriter(new FileWriter("index.html", true));
        writer.append(str);
    
        writer.close();
        
    } catch (IOException e) {
        System.out.println("An error occurred.");
        e.printStackTrace();
    }
}
 
CHARACTERS
    letra = 'A'..'Z' + 'a'..'z'.
    digito = '0'..'9'.
    linhaComChar = ANY - '\r' - '\n'.
    qualquerCharMenosAspas = linhaComChar - '\"'.
 
TOKENS
    ident = letra { letra  | digito }.
    numero = ['-'] digito {digito}.
    strConst = '"' { qualquerCharMenosAspas | "\\\""} '"'.

    /* Palavras-chave*/
    inicio = "inicio" .
    fim = "fim".
    variavel = "variavel".
    caso = "caso".
    enquanto = "enquanto".
    para = "para".
    repita = "repita" .
 
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n' 
 
IGNORE 
    '\n' + '\r' + '\t'
 
PRODUCTIONS

    UPortugol =  Bloco { Bloco } .     
       
    Bloco                      (. String res; String saidaFormatada  = "";.)
    = DeclProc <out res>       (. saidaFormatada = saidaFormatada + res;  .)// v é o valor da expressão/saída O v vem do Bloco
    { 
        Instrucao <out res>    (. saidaFormatada = saidaFormatada + res; .)
    }                          (. System.out.println(saidaFormatada); appendFile(beginDocument(saidaFormatada)); .)
    .                           
    
    DeclProc<out String res>                  (. res = ""; String v1=""; String v2 = "";String t1 = ""; .)
    = "procedimento"                          (. res = toBlueBold(t.val); .)   
       ident                                  (. res = res + " " + toBlackBold(t.val); .)      
       "("                                    (. res = res + t.val; .) 
        
        Parametros  <out v1 >                 (. res = res + v1; .) 
        
      //  ["[]"]                                (. res = res + t.val; .) 
        ")"                                   (. res = res + t.val; .)  
        [":"                                  (. res = res +  t.val; .)
        Tipo <out t1 >                        (. res = res + t1; .) 
        ]
        inicio                                (. res = res + toBlackBold(ident(t.val,20)); .)
        {
         Instrucao  <out v2>                  (. res = res +  ident(v2,40) ; .)  
        }
        fim                                   (. res = res + toRedBold(t.val); .)
      .

    Tipo <out String res>           (. res = ""; .) 
    = "inteiro"                     (. res = res + " " + toBlackBold(t.val); .)
    .
    Parametros <out String res>     (. res = ""; .)
    = 
        { 
        ident                        (. res = res + t.val; .)
        ":"                          (. res = res + " " + t.val; .)
        "inteiro"                    (. res = res + toRedBold(t.val); .)
        [("," | "[]")]               (. res = res + t.val; .) 
        }   
    . 
    
    Instrucao <out String res>       (.res = "";  String v1=""; String v2 = ""; .)
    = DeclVar <out v1>              (. res = res + v1; .) 
      | ChamaProc  <out v2>         (. res = res + v2; .) 
    .

    DeclVar  <out String res>        (. res = ""; String v1=""; String v2 = ""; .)           
    = ComAtribuicao <out v1>         (. res = res + v1; .)
    ";"                              (. res = res + t.val;.)    
    | SemAtribuicao <out v2>         (. res = res + v2;.)
    ";"                              (. res = res + t.val;.)
    .
    
    SemAtribuicao <out String res>  (. res = ""; .) 
    = "variavel"                    (. res = res + toBlackBold(t.val); .)
    .                  

    ComAtribuicao <out String res>   (. res = ""; .)
    = ident                          (. res = res + toBlackBold(t.val);.)
    "="  
    .

    ChamaProc  <out String res>     (. res = ""; String v1=""; String v2 = ""; .)
    = Designator <out v1>           (. res = res + v1;.) 
    ParamsDeclarados <out v2>       (. res = res + v2;.) 
    ";"                             (. res = res + t.val;.) 
    .
    Designator <out String res>    (. res = "";  .)
    = ident                        (. res = res + toBlackBold(t.val);.)
    .
    //ident "(" Expr ")".


    ParamsDeclarados <out String res>   (. res = "";.)
    = "("                               (. res = res + t.val;.) 
    .
    //= "(" { ident [ Expr ] [ ","] } ")".
 
END UPortugol.

     
  /*  UPortugol = { Bloco }.
    Bloco = DeclProc { Instrucao } .
    DeclProc = "procedimento" ident "(" {Parametros} ")" 
                [":" Tipo ] "inicio" {Instrucao} "fim".
    Tipo = "inteiro".
    Instrucao = DeclVar |
                ChamaProc | Condicao "fimse;"  | Retorno ";" | Escreva .
    Parametros =  ident ":" "inteiro" [ "[]" ][","]. 
    DeclVar = ComAtribuicao ";" | SemAtribuicao ";" .
    SemAtribuicao = "variavel" Expr  [(":" |",")] ["inteiro"] {Expr  [(":" |",")] [Tipo]}. 
    ComAtribuicao = ident "=" Expr .
    ChamaProc = Designator ParamsDeclarados ";".
    ParamsDeclarados  = "(" { ident [ Expr ] [ ","] } ")".
    ParamsPassados = "(" [ Expr {"," Expr}] ")".
    Condicao = "se" Expr OpRelacional Expr "entao" Instrucao  ["senao" Instrucao].
    OpRelacional = "<" | ">" | ">=" | "<=" | "!=".
    Designator = ident "(" Expr ")".
    Expr = ["-"] Termo { ( "+" Termo | "-" Termo ) } .
    Termo = Fator { ( "*" Fator | "/" Fator ) } .
    Fator =  ident ["[" Expr "]"] | numero | "(" Expr ")" | "abs" "(" Expr ")" .
    FatorVetor =  "novo" ident ("[" Expr "]" | Inicializ).
    Inicializ = "{" { numero } "}".
   
    Retorno = "retorne" [Expr] .
    Escreva = "escreva" "(" [Expr] [strConst] [Expr] {  [ Expr ] [strConst] "," [strConst]  Expr }  ");". *
    */
