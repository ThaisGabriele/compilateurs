import java.io.*;
import java.io.File; 
import java.io.IOException;
 
COMPILER UPortugol

/* Métodos para formatação */

//String beginDocument (String s) {
 //   return "<html style='font: 18px Helvetica sans-serif><body>" + s + "</body></html>";
//} 

String ident(String s, int margin) {
    return "<div style='margin-left:" + margin +"px'>" + s + "</div>";
}

String toBlueBold(String s) { 
      //  String[] valorComSplit = s.split(" ");

      //       for(String i : valorComSplit){
        //            if (i == "se")
                        return "</span><br/><span style='color: #0000ff;'><strong>"+ s + "</strong></span>"; 
          //   }

        
  //  }
  //  return s;
}
 
String toRedBold(String s) { 
    return  "<span style='color: #ff0000;'><strong>" + s + "</strong></span>";    
}

String toBlackBold(String s) { 
    return  "<strong>" + s +"</strong>";
}
/* Método que checa se a função chamada foi declarada em algum momento no escopo*/ 
boolean checkProc(String s){
    String proc = "jOk";
    if (s == proc) {
        return true;
    }
    return false;
} 

void appendFile(String saidaFormatada) {
    try {
        String str = saidaFormatada;
        BufferedWriter writer = new BufferedWriter(new FileWriter("index.html", true));
        writer.append(str);
    
        writer.close();
        
    } catch (IOException e) {
        System.out.println("An error occurred.");
        e.printStackTrace();
    }
}
 
CHARACTERS
    letra = 'A'..'Z' + 'a'..'z'.
    digito = '0'..'9'.
    linhaComChar = ANY - '\r' - '\n'.
    qualquerCharMenosAspas = linhaComChar - '\"'.
//    letraConstante = 'A'..'Z'
 
TOKENS
    ident = letra { letra  | digito }.
    numero = ['-'] digito {digito}.
    strConst = '"' { qualquerCharMenosAspas | "\\\""} '"'.


/* Palavras-chave */
    
    inicio = "inicio" .
    fim = "fim".
    variavel = "variavel".
    caso = "caso".
    enquanto = "enquanto".
    repita = "repita" .
    leia = "leia".
    escreva = "escreva".
    retorne = "retorne".
    constante = "constante".
    novo = "novo".
    algoritmo = "algoritmo".
    procedimento = "procedimento".
  
/*  Condicionais    */ 

    se = "se".
    senao = "senao".
    entao = "entao".
    fimse = "fimse".

    para = "para".
    ate = "ate".
    faca = "faca".
    fimpara = "fimpara".

/*  Operadores    */ 
    maior = ">".
    menor = "<".
    maiorIgual = ">=".                      
    menorIgual = "<=".                      
    diferente = "!=".                     
    resto =  "%".  
    igual = "==".                     

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n' 
 
IGNORE 
    '\n' + '\r' + '\t'
 
PRODUCTIONS

    UPortugol =  Bloco { Bloco } .     
    /* Bloco = DeclProc { Instrucao } */  
    Bloco                      (. String res; String saidaFormatada  = "";.)
    = DeclProc <out res>       (. saidaFormatada = saidaFormatada + res;  .)
    { 
        Instrucao <out res>    (. saidaFormatada = saidaFormatada + res; .)
    }                          (. appendFile(saidaFormatada); .)
    .                           
    
    /* DeclProc = "procedimento" ident "(" {Parametros} ")" [":" Tipo ] "inicio" {Instrucao} "fim". */
    DeclProc<out String res>                  (. String v1, v2, t1 = ""; .)
    =  procedimento                           (. res = toBlueBold(t.val); .)   
       ident                                  (. res = res + " " + toBlackBold(t.val); .)      
       "("                                    (. res = res + t.val; .) 
        Parametros  <out v1 >                 (. res = res + v1; .) 
        ")"                                   (. res = res + t.val; .)  
        [":"                                  (. res = res +  t.val; .)
        Tipo <out t1 >                        (. res = res + t1; .) 
        ]
        inicio                                (. res = res + toBlueBold(ident(t.val,20)); .)
        {
         Instrucao  <out v2>                  (. res = res +  ident(v2,40) ; .)  
        }
        fim                                   (. res = res + toBlueBold(ident(t.val,20)); .)
      .

    Tipo <out String res>           (. res = ""; .) 
    = "inteiro"                     (. res = res + " " + toRedBold(t.val); .)
    .
    
    Parametros <out String res>     (. res = ""; .)
    = 
    { 
        ident                        (. res = res + " " + toBlackBold(t.val); .)   
        ":"                          (. res = res + " " + t.val; .)
        "inteiro"                    (. res = res + toRedBold(t.val); .)
        [("," | "[]")]               (. res = res + t.val; .) 
    }   
    . 
    /* Instrucao = DeclVar | Condicao | Retorno | Escreva | Leia | Repeticao */
    Instrucao <out String res>       (.res = "";  String v1, v2,v3,v4,v5,v6,v7 = "";  .)
    = DeclVar <out v1>               (. res = res + v1; .) 
   //   | ChamaProc  <out v2>          (. res = res + v2; .) 
      | Condicao  <out v3>            (. res = res + v3; .) 
            "fimse;"                  (. res = res + ident(t.val,20); .)  
      | Retorno   <out v4>           (. res = res + v4; .)         
      
      | Escreva   <out v5>           (. res = res + v5; .) 
      | Para  <out v6>               (. res = res + v6; .) 
            "fimpara;"               (. res = res + toBlueBold(ident(t.val,20)); .)  
     | Enquanto  <out v7>            (. res = res + v7; .) 
            "fimenquanto;"           (. res = res + toBlueBold(ident(t.val,20)); .)  
            
    .

    Retorno <out String res>        (.res = "";  String v1=""; .)
    = retorne                       (. res = res + toBlackBold(ident(t.val,20)); .) 
     Expr  <out v1>                 (. res = res + v1; .) 
     ";"                            (. res = res + t.val;.) 
    .   

    DeclVar  <out String res>        (. res = ""; String v1, v2 = ""; .)           
    = ComAtribuicao  <out v1>      
            ";"                      (. res = res + v1; .)
    | 
    variavel SemAtribuicao <out v2>  (. res = res + " " + v2;.)
    .
    
    // variavel j, min, minj: inteiro;  variavel tmp: inteiro;
    SemAtribuicao <out String res>  (.  res = ""; String v1=""; .) 
    =  
        Expr <out v1>               (. res = v1 + " "; .)
        {
        "," Expr <out v1>               (. res =  res + v1 + " "; .)
        }
         ":"                        (. res = res + t.val;.) 
        "inteiro"                   (. res = res + toRedBold(t.val);.)     
        ";"                         (. res = res + t.val;.)   
    .                  
    //min = v[i]; minj = i;
    ComAtribuicao <out String res>   (. res = "";  String v1,v2=""; .)
    = 
        Expr <out v1>                (. res = res + v1;.)
    "=" Expr <out v2>                (. res = res + v2; .)
    .

    Condicao <out String res>               (. res="";String v1, v2,v3=" ";.)
    =   [ se ]                               //  (. res = toBlueBold(t.val);.)
        Expr  <out v1>                      (. res = res + toBlueBold(v1); .)
        ( maior | menor |
          menorIgual | maiorIgual | 
          diferente | resto |igual)          // (. res = res + t.val;.)
        Expr <out v3>                       (. res = res + v3 + " " ; .)      
        [
        entao                               (. res = res + toBlueBold(t.val); .)
        Instrucao  <out v2>                 (. res = res + ident(v2,40); .) 
        [ ( senao  Instrucao <out v2>       (. res = res + ident(v2,40); .)
           ) ] 
        ] 
    .
    
    Escreva <out String res>        (. res = "";String v1,v2="";.)
    = escreva                       (. res = res + t.val;.)
    "("                             (. res = res + t.val;.)
    ( 
        Expr  <out v1>                (. res = res + v1;.)  
        [","                          (. res = res + t.val;.)
        strConst                      (. res = res + t.val;.)
        ]          
        | strConst                    (. res = res + t.val;.)
    )
    ");"                              (. res = res + t.val;.)  
    .

    Para <out String res>       (. res = "";String v1,v2,v3="";.)  
    = para                     // (. res = res + toBlackBold((t.val));.)
    ComAtribuicao <out v1>      (. System.out.println(res); res = res + toBlackBold(v1);.) 
    ate                       //  (. res = res + t.val;.)
    Expr  <out v2>              (. res = res + v2 + " ";.) 
    faca                        (. res = res + t.val;.)
    Instrucao <out v3>          (. res = res + ident(v3,20);.) 
    .

    Enquanto <out String res>       (. res = ""; boolean check=false; String v1,v2,v3="";.)  
    = enquanto                      (. res = res + toBlueBold((t.val));.)
  //  ident                          (. if (checkProc(t.val) == true) 
  //                                        res = res + t.val;            .)
   // Instrucao  <out v3>            (. res = res + v3;.) 
    Condicao <out v1>              (. res = res + toBlackBold(v1);.) 
    faca                           (. res = res + t.val;.)
    Instrucao  <out v2>            (. res = res + ident(v2,20);.) 
    .
    //v = novo inteiro[MAX];
    //v = novo inteiro {1, 2, 3, 4, 5};  
    FatorVetor <out String res>   (. res = "";  String v1, v2=""; .)
    =  
        "["                                                     
         Expr  <out v1>                      (. res =  " " + toBlackBold(" " + v1); .)
        "]"                                  (. res = res + t.val ; .)             
       | novo                                (. res = res + toBlackBold(t.val); .)
       ident                                 (. res = res + toBlackBold(t.val); .)
       ( Expr   <out v1>                     (. res = res + v1; .)  
       | Inicializa <out v2>                 (. res = res + v2; .)  
       )
    .
    
    Expr <out String res>            (. res = "";  String v1, v2="";.)
    = ["-"]                          (. res = res + t.val;.)
    Termo <out v1>                   (. res = res + v1; .)             
        {                       
            ( "+"                    (. res = res + t.val; .)
            Termo  <out v2>          (. res = res + v2; .)          
            | "-"                    (. res = res + t.val; .)
            Termo  <out v2>          (. res = res + v2; .)  
            )
        } 
    .

    Termo <out String res>        (. res = "";  String v1, v2="";.)
    = Fator <out v1>              (. res = res + v1; .)               
    { 
        ( "*"                     (. res = res + t.val; .) 
        Fator <out v2>            (. res = res + v2; .)  
        | "/"                     (. res = res + t.val; .) 
        Fator  <out v2>           (. res = res + v2; .)  
        ) 
    } .

    Fator <out String res>         (. res = "";  String v1,v2,v3=""; .)
    = 
    ident                          (. res = res + toBlackBold(t.val); .)
    [ 
        FatorVetor  <out v1>        (. res = res + v1; .)  
    ] 
    [ 
        ParamsDeclarados<out v3>   (. res = res + v3; .)  
    ] 
    | numero                       (. res = res + toBlackBold(t.val); .)
    | TamanhoVet  <out v2>         (. res = res + v2; .)
  //  | ChamaProcedimento  <out v2>  (. res = res + v2; .)
   // |  Expr   <out v1>            (. res = res + v1; .)  
  //  |  FatorVetor <out v2>        (. res = res + v2; .) 
  //  | "[" ident "]"               (. res = res + t.val; .) 
    .
    //jOk (j, aux, v)
    ChamaProcedimento  <out String res>      (. res = ""; String v1=""; String v2 = ""; .)
    = ident                                  (. res = res + t.val + " ";.) 
    ParamsDeclarados <out v2>                (. res = res + v2;.) 
    ";"                                      (. res = res + t.val;.) 
    .



//ParamsDeclarados  = "(" { ident [ Expr ] [ ","] } ")".
 
    ParamsDeclarados <out String res>   (. res = ""; String v1="";.)
    = "("                               (. res = res + t.val;.) 
        {  
            Expr  <out v1>              (. res = res + v1; .)    
            [","]                       (. res = res + t.val;.) 
        } 
        ")"                             (. res = res + t.val;.) 
        . 
     


    
    Inicializa <out String res>   (. res = ""; .)
    = "{"                         (. res = res + t.val; .) 
        { 
            numero                (. res = res + toBlackBold(t.val); .)
            [","]                 (. res = res + t.val; .) 
        } 
      "}"                         (. res = res + t.val; .) 
    .
 
    //tamanho(vetor)
    TamanhoVet <out String res>     (. res = ""; String v1=""; .)
    =   "tamanho"                   (. res = res + t.val; .)
        "("                         (. res = res + t.val; .)
        ( numero 
        | Expr  <out v1>)           (. res = res + v1; .)           
        ")"                         (. res = res + t.val; .)
    .


END UPortugol.



     
  /*  UPortugol = { Bloco }.
    Bloco = DeclProc { Instrucao } .
    DeclProc = "procedimento" ident "(" {Parametros} ")" [":" Tipo ] "inicio" {Instrucao} "fim".
    Tipo = "inteiro".
    Instrucao = DeclVar |
                ChamaProc | Condicao "fimse;"  | Retorno ";" | Escreva .
    Parametros =  ident ":" "inteiro" [ "[]" ][","]. 
    DeclVar = ComAtribuicao ";" | SemAtribuicao ";" .
    SemAtribuicao = "variavel" Expr  [(":" |",")] ["inteiro"] {Expr  [(":" |",")] [Tipo]}. 
    ComAtribuicao = ident "=" Expr .
    ChamaProc = Designator ParamsDeclarados ";".
    ParamsDeclarados  = "(" { ident [ Expr ] [ ","] } ")".
    ParamsPassados = "(" [ Expr {"," Expr}] ")".
    Condicao = "se" Expr OpRelacional Expr "entao" Instrucao  ["senao" Instrucao].
    OpRelacional = "<" | ">" | ">=" | "<=" | "!=".
    Designator = ident "(" Expr ")".
    Expr = ["-"] Termo { ( "+" Termo | "-" Termo ) } .
    Termo = Fator { ( "*" Fator | "/" Fator ) } .
    Fator =  ident ["[" Expr "]"] | numero | "(" Expr ")" | "abs" "(" Expr ")" .
    FatorVetor =  "novo" ident ("[" Expr "]" | Inicializ).
    Inicializ = "{" { numero } "}".
   
    Retorno = "retorne" [Expr] .
    Escreva = "escreva" "(" [Expr] [strConst] [Expr] {  [ Expr ] [strConst] "," [strConst]  Expr }  ");". *
    */

